package lyc.compiler;

import java_cup.runtime.*;

class Parser;


// Terminals
terminal INIT;
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_BRACE;
terminal CLOSE_BRACE;
terminal COMMA;
terminal COLON;
terminal INTEGER_CONSTANT;
terminal IDENTIFIER;
terminal READ;
terminal WRITE;
terminal TEXT;
terminal COMMENT;
terminal FLOAT_CONSTANT;
terminal TYPE_INT;
terminal TYPE_FLOAT;
terminal TYPE_STRING;
terminal GT;
terminal LT;
terminal GE;
terminal LE;
terminal EQ;
terminal AND;
terminal OR;
terminal NOT;
terminal OPEN_SQUARE;
terminal CLOSE_SQUARE;
terminal SEMICOLON;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal IS_ZERO;

// Non Terminals
non terminal program;
non terminal sentence_list;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal read;
non terminal write;

non terminal init_block;
non terminal decl_list;
non terminal declaration;
non terminal java.util.List id_list;
non terminal typeDef;

//Funcion triangle
non terminal arg_list;
non terminal triangle;
non terminal coords;

//Funcion IsZero
non terminal while_stmt;

non terminal if_statement;
non terminal condition;
non terminal simple_condition;

// Start Symbol Definition
start with program;

program ::= init_block sentence_list | init_block;

sentence_list ::= sentence_list sentence | sentence;

sentence ::= assignment {: System.out.println("Assignment"); :};
sentence ::= read {: System.out.println("Sentence = READ"); :};
sentence ::= write {: System.out.println("Sentence = WRITE"); :};
sentence ::= COMMENT {: System.out.println("comentario"); :};
sentence ::= if_statement {: System.out.println("Sentence = IF"); :};
sentence ::= while_stmt {: System.out.println("Sentence = WHILE"); :};

if_statement ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_BRACE sentence_list CLOSE_BRACE {: System.out.println("IF"); :};
if_statement ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_BRACE sentence_list CLOSE_BRACE ELSE OPEN_BRACE sentence_list CLOSE_BRACE {: System.out.println("IF-ELSE"); :};

condition ::= simple_condition {: System.out.println("Condición test"); :};
condition ::= simple_condition AND simple_condition {: System.out.println("Condición AND"); :};
condition ::= simple_condition OR simple_condition  {: System.out.println("Condición OR"); :};
condition ::= NOT simple_condition                  {: System.out.println("Condición NOT"); :};

simple_condition ::= expression GT expression {: System.out.println(">"); :};
simple_condition ::= expression LT expression {: System.out.println("<"); :};
simple_condition ::= expression GE expression {: System.out.println(">="); :};
simple_condition ::= expression LE expression {: System.out.println("<="); :};
simple_condition ::= expression EQ expression {: System.out.println("="); :};


// NUEVO: tipos de datos
typeDef ::= TYPE_INT    {: RESULT = "Int"; :};
typeDef ::= TYPE_FLOAT  {: RESULT = "Float"; :};
typeDef ::= TYPE_STRING {: RESULT = "String"; :};
          

init_block ::= INIT OPEN_BRACE decl_list CLOSE_BRACE {: System.out.println("Init block cerrado"); :};

decl_list ::= decl_list declaration;
decl_list ::= declaration;

// NUEVO: una declaración puede tener varias variables separadas por coma
declaration ::= id_list:l COLON typeDef:td
               {:
                  System.out.println("Declaracion de variables tipo " + td);
                  lyc.compiler.files.SymbolTableGenerator.getInstance().addIdentifiers(l, (String) td);
               :};

id_list ::= id_list:l COMMA IDENTIFIER:id
           {:
              l.add(id);
              RESULT = l;
              System.out.println("Variable: " + id);
           :};

id_list ::= IDENTIFIER:id
           {:
              java.util.List l = new java.util.ArrayList();
              l.add(id);
              RESULT = l;
              System.out.println("Variable: " + id);
           :};

assignment ::= IDENTIFIER ASSIG expression {: System.out.println("Assignment"); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};

term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};

factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant ); :};
factor ::= FLOAT_CONSTANT:constant   {: System.out.println("Float: " + constant ); :};      // NUEVO
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};
factor ::= IDENTIFIER OPEN_BRACKET arg_list CLOSE_BRACKET {: System.out.println("Funcion triangle - metodo"); :};
factor ::= AND;
factor ::= OR;
factor ::= NOT;


read    ::= READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET {: System.out.println("READ"); :};
write   ::= WRITE OPEN_BRACKET IDENTIFIER CLOSE_BRACKET {: System.out.println("WRITE"); :};
write   ::= WRITE OPEN_BRACKET TEXT CLOSE_BRACKET {: System.out.println("WRITE"); :};

//Funcion triangle
arg_list ::= triangle SEMICOLON triangle {: System.out.println("Funcion triangle - params"); :};
triangle ::= OPEN_SQUARE coords SEMICOLON coords SEMICOLON coords CLOSE_SQUARE {: System.out.println("Funcion triangle - coord triangulo"); :};
coords ::= expression COMMA expression {: System.out.println("Funcion triangle - valores"); :};

/* while ( condition ) { sentence_list } */
while_stmt ::= WHILE OPEN_BRACKET condition CLOSE_BRACKET
               OPEN_BRACE sentence_list CLOSE_BRACE
               {: System.out.println("REGLA -- while"); :};

/* condición booleana: isZero(expr) */
condition  ::= IS_ZERO OPEN_BRACKET expression CLOSE_BRACKET
               {: System.out.println("REGLA -- condicion <-- isZero(expr)"); :};