package lyc.compiler;

import java_cup.runtime.*;

class Parser;


// Terminals
terminal INIT;
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_BRACE;         // NUEVO para '{'
terminal CLOSE_BRACE;        // NUEVO para '}'
terminal COMMA;              // NUEVO para separar variables
terminal COLON;              // NUEVO para ':'
terminal INTEGER_CONSTANT;
terminal IDENTIFIER;
terminal READ;
terminal WRITE;
terminal TEXT;
terminal COMMENT;
terminal FLOAT_CONSTANT;
terminal TYPE_INT;
terminal TYPE_FLOAT;
terminal TYPE_STRING;

terminal GT, LT, GE, LE, EQ, AND, OR, NOT;

// Non Terminals
non terminal program;
non terminal sentence_list;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal read;
non terminal write;

non terminal init_block;      // NUEVO
non terminal decl_list;       // NUEVO
non terminal declaration;     // NUEVO
non terminal id_list;         // NUEVO
non terminal typeDef;         // NUEVO

// Start Symbol Definition
start with program;

program ::= init_block sentence_list | init_block;

sentence_list ::= sentence_list sentence | sentence;

sentence ::= assignment {: System.out.println("Assignment"); :};
sentence ::= read {: System.out.println("Sentence = READ"); :};
sentence ::= write {: System.out.println("Sentence = WRITE"); :};
sentence ::= COMMENT {: System.out.println("comentario"); :};
// NUEVO: tipos de datos
typeDef ::= TYPE_INT    {: RESULT = "Int"; :};      // NUEVO
typeDef ::= TYPE_FLOAT  {: RESULT = "Float"; :};    // NUEVO
typeDef ::= TYPE_STRING {: RESULT = "String"; :};   // NUEVO
          

init_block ::= INIT OPEN_BRACE decl_list CLOSE_BRACE {: System.out.println("Init block cerrado"); :}; // NUEVO

decl_list ::= decl_list declaration;   // NUEVO
decl_list ::= declaration;             // NUEVO

// NUEVO: una declaraci√≥n puede tener varias variables separadas por coma
declaration ::= id_list COLON typeDef:td {: System.out.println("Declaracion de variables tipo " + td); :};


id_list ::= id_list COMMA IDENTIFIER:id  {: System.out.println("Variable: " + id); :};
id_list ::= IDENTIFIER:id  {: System.out.println("Variable: " + id); :};




assignment ::= IDENTIFIER ASSIG expression {: System.out.println("Assignment"); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};

term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};

factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant ); :};
factor ::= FLOAT_CONSTANT:constant   {: System.out.println("Float: " + constant ); :};      // NUEVO
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};

read    ::= READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET {: System.out.println("Regla - READ"); :};
write   ::= WRITE OPEN_BRACKET IDENTIFIER CLOSE_BRACKET {: System.out.println("Regla - WRITE"); :};
write   ::= WRITE OPEN_BRACKET TEXT CLOSE_BRACKET {: System.out.println("Regla - WRITE"); :};