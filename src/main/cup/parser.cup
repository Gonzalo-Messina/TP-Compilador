package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.ParserSym; 
import lyc.compiler.files.IntermediateCodeGenerator;

class Parser;

// Terminals
terminal INIT;
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_BRACE;
terminal CLOSE_BRACE;
terminal COMMA;
terminal COLON;
terminal INTEGER_CONSTANT;
terminal IDENTIFIER;
terminal READ;
terminal WRITE;
terminal TEXT;
terminal COMMENT;
terminal FLOAT_CONSTANT;
terminal TYPE_INT;
terminal TYPE_FLOAT;
terminal TYPE_STRING;
terminal GT;
terminal LT;
terminal GE;
terminal LE;
terminal EQ;
terminal AND;
terminal OR;
terminal NOT;
terminal OPEN_SQUARE;
terminal CLOSE_SQUARE;
terminal SEMICOLON;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal IS_ZERO;
terminal TRIANGLE_AREA_MAX;

// Non Terminals
non terminal program;
non terminal sentence_list;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal read;
non terminal write;

non terminal init_block;
non terminal decl_list;
non terminal declaration;
non terminal java.util.List id_list;
non terminal typeDef;


//Funcion triangle
non terminal arg_list;
non terminal triangle;
non terminal coords;


non terminal while_statement;
non terminal if_statement;
non terminal java.util.List<String> if_header;
non terminal java.util.List<String> while_header;
non terminal String while_start;

non terminal String condition;
non terminal String simple_condition;



// --- REGLAS DE LA GRAMÁTICA ---

start with program;

program ::= init_block sentence_list | init_block;

sentence_list ::= sentence_list sentence | sentence;

sentence ::= assignment {: System.out.println("Assignment"); :};
sentence ::= read {: System.out.println("Sentence = READ"); :};
sentence ::= write {: System.out.println("Sentence = WRITE"); :};
sentence ::= if_statement {: System.out.println("Sentence = IF"); :};
sentence ::= while_statement {: System.out.println("Sentence = WHILE"); :};
sentence ::= COMMENT {: System.out.println("comentario"); :};

// --- ESTRUCTURAS DE CONTROL ---

if_header ::= IF OPEN_BRACKET condition:c CLOSE_BRACKET
            {:
                // 1. Creamos las etiquetas aquí mismo.
                String sino_label = IntermediateCodeGenerator.getInstance().newLabel();
                String fin_if_label = IntermediateCodeGenerator.getInstance().newLabel();

                // 2. Generamos el salto condicional al bloque ELSE.
                // La condición ya generó sus tokens, solo agregamos el salto
                IntermediateCodeGenerator.getInstance().addToken(sino_label);
                IntermediateCodeGenerator.getInstance().addToken("BF");

                // 3. Devolvemos las etiquetas para que la regla principal las use.
                RESULT = java.util.Arrays.asList(sino_label, fin_if_label);
            :};

if_statement ::= if_header:labels OPEN_BRACE sentence_list CLOSE_BRACE 
               {: 
                  System.out.println("IF");
                  // Para un IF simple, el salto nos saca de la estructura.
                  // La etiqueta "sino" es en realidad la etiqueta "fin".
                  String fin_if_label = labels.get(0);

                  // El código del THEN ya fue generado.

                  // Generamos la etiqueta de destino final.
                  IntermediateCodeGenerator.getInstance().addToken(fin_if_label + ":");
               :};

if_statement ::= if_header:labels OPEN_BRACE sentence_list:then_part CLOSE_BRACE
               // Este bloque de acción se ejecuta ANTES de procesar el ELSE
               {: 
                  // Recuperamos las etiquetas que generó el if_header.
                  String sino_label = labels.get(0);
                  String fin_if_label = labels.get(1);

                  // 1. Generamos el salto incondicional para OMITIR el bloque ELSE.
                  IntermediateCodeGenerator.getInstance().addToken(fin_if_label);
                  IntermediateCodeGenerator.getInstance().addToken("BI");
                  IntermediateCodeGenerator.getInstance().markLabelUsed(fin_if_label);

                  // 2. Generamos la etiqueta de inicio del bloque ELSE.
                  IntermediateCodeGenerator.getInstance().addToken(sino_label + ":");
                  IntermediateCodeGenerator.getInstance().markLabelUsed(sino_label);
               :}
               ELSE OPEN_BRACE sentence_list:else_part CLOSE_BRACE
               // Este bloque de acción se ejecuta al FINAL de toda la sentencia
               {:
                  // Recuperamos la etiqueta final de las etiquetas originales.
                  String fin_if_label = labels.get(1);

                  // 3. Generamos la etiqueta de fin de toda la estructura.
                  IntermediateCodeGenerator.getInstance().addToken(fin_if_label + ":");
               :};

/* while ( condition ) { sentence_list } */

while_start ::= WHILE OPEN_BRACKET
              {:
                  System.out.println("WHILE"); 
                  String inicio_label = IntermediateCodeGenerator.getInstance().newLabel();
                  IntermediateCodeGenerator.getInstance().addToken(inicio_label + ":");
                  RESULT = inicio_label; // Devuelve el nombre de la etiqueta
              :};

while_header ::= while_start:inicio_label condition:c CLOSE_BRACKET
               {:
                    String fin_label = IntermediateCodeGenerator.getInstance().newLabel();

                    // La condición ya generó sus tokens, solo agregamos el salto
                    // Ahora generamos el salto para salir del bucle.
                    IntermediateCodeGenerator.getInstance().addToken(fin_label);
                    IntermediateCodeGenerator.getInstance().addToken("BF");

                    // Pasamos ambas etiquetas a la regla final.
                    RESULT = java.util.Arrays.asList(inicio_label, fin_label);
               :};

while_statement ::= while_header:labels OPEN_BRACE sentence_list:body CLOSE_BRACE
                  {: 
                    System.out.println("WHILE"); 
                    String inicio_label = labels.get(0);
                    String fin_label = labels.get(1);

                    // El código del cuerpo ya se generó.
                    // Ahora generamos el salto incondicional para volver al INICIO.
                    IntermediateCodeGenerator.getInstance().addToken(inicio_label);
                    IntermediateCodeGenerator.getInstance().addToken("BI");
                            
                    // Finalmente, generamos la etiqueta de FIN.
                    IntermediateCodeGenerator.getInstance().addToken(fin_label + ":");
                  :};


// --- CONDICIONES ---

condition ::= simple_condition:sc {: System.out.println("Condición test"); RESULT = sc; :};

condition ::= condition AND simple_condition 
            {: 
            System.out.println("Condicion AND"); 
            IntermediateCodeGenerator.getInstance().addToken("AND");
            :};

condition ::= condition OR simple_condition  
            {: 
            System.out.println("Condicion OR");
            IntermediateCodeGenerator.getInstance().addToken("OR");
            :};

condition ::= NOT simple_condition                  
            {: 
            System.out.println("Condición NOT"); 
            IntermediateCodeGenerator.getInstance().addToken("NOT");
            :};


simple_condition ::= expression GT expression 
                  {: 
                  System.out.println(">"); 
                  // Polish notation: GT (expressions already processed)
                  IntermediateCodeGenerator.getInstance().addToken("GT");
                  RESULT = "GT";
                  :};

simple_condition ::= expression LT expression 
                  {: 
                  System.out.println("<"); 
                  // Polish notation: LT (expressions already processed)
                  IntermediateCodeGenerator.getInstance().addToken("LT");
                  RESULT = "LT";
                  :};

simple_condition ::= expression GE expression 
                  {: 
                  System.out.println(">="); 
                  // Polish notation: GE (expressions already processed)
                  IntermediateCodeGenerator.getInstance().addToken("GE");
                  RESULT = "GE";
                  :};

simple_condition ::= expression LE expression 
                  {: 
                  System.out.println("<="); 
                  // Polish notation: LE (expressions already processed)
                  IntermediateCodeGenerator.getInstance().addToken("LE");
                  RESULT = "LE";
                  :};

simple_condition ::= expression EQ expression 
                  {: 
                  System.out.println("="); 
                  // Polish notation: EQ (expressions already processed)
                  IntermediateCodeGenerator.getInstance().addToken("EQ");
                  RESULT = "EQ";
                  :};

simple_condition ::= IS_ZERO OPEN_BRACKET expression CLOSE_BRACKET
                  {: 
                  System.out.println("IS_ZERO_CONDITION");
                  IntermediateCodeGenerator.getInstance().addToken("IS_ZERO"); 
                  :};




// --- TIPOS DE DATOS ---

typeDef ::= TYPE_INT    {: RESULT = "Int"; :};
typeDef ::= TYPE_FLOAT  {: RESULT = "Float"; :};
typeDef ::= TYPE_STRING {: RESULT = "String"; :};
          

// --- DECLARACIONES (No generan código intermedio) ---          

init_block ::= INIT OPEN_BRACE decl_list CLOSE_BRACE {: System.out.println("Init block cerrado"); :};

decl_list ::= decl_list declaration;
decl_list ::= declaration;

// NUEVO: una declaración puede tener varias variables separadas por coma
declaration ::= id_list:l COLON typeDef:td
               {:
                  System.out.println("Declaracion de variables tipo " + td);
                  lyc.compiler.files.SymbolTableGenerator.getInstance().addIdentifiers(l, (String) td);
               :};

id_list ::= id_list:l COMMA IDENTIFIER:id
           {:
              l.add(id);
              RESULT = l;
              System.out.println("Variable: " + id);
           :};

id_list ::= IDENTIFIER:id
           {:
              java.util.List l = new java.util.ArrayList();
              l.add(id);
              RESULT = l;
              System.out.println("Variable: " + id);
           :};


// --- ASIGNACIÓN Y EXPRESIONES ARITMÉTICAS ---

assignment ::= IDENTIFIER:id ASSIG expression 
            {: 
            System.out.println("Assignment");
            // VALIDACIÓN: Verificar que la variable esté declarada
            if (!lyc.compiler.files.SymbolTableGenerator.getInstance().isVariableDeclared(id.toString())) {
                throw new lyc.compiler.model.UnknownVariableException("Variable '" + id + "' no fue declarada");
            }
            // VALIDACIÓN: Verificar compatibilidad de tipos básica
            String variableType = lyc.compiler.files.SymbolTableGenerator.getInstance().getVariableType(id.toString());
            if (variableType != null) {
                // Verificar si la expresión es compatible con el tipo de variable
                // Esta es una validación básica - se puede expandir
                System.out.println("Validando tipo de variable: " + variableType);
            }
            IntermediateCodeGenerator.getInstance().addToken(id.toString());
            IntermediateCodeGenerator.getInstance().addToken(":="); 
            :};

expression ::= expression PLUS term
            {: 
            System.out.println("+");
            IntermediateCodeGenerator.getInstance().addToken("+");
            :};
expression ::= expression SUB term
            {: 
            System.out.println("-"); 
            IntermediateCodeGenerator.getInstance().addToken("-");
            :};

expression ::= term {: System.out.println("Expression = Term"); :};

term ::= term MULT factor 
      {: 
      System.out.println("*"); 
      IntermediateCodeGenerator.getInstance().addToken("*");
      :};

term ::= term DIV factor 
      {: 
      System.out.println("/"); 
      IntermediateCodeGenerator.getInstance().addToken("/");
      :};

term ::= factor {: System.out.println("Term = factor"); :};

factor ::= IDENTIFIER:id  
         {: 
         System.out.println("Id: " + id); 
         IntermediateCodeGenerator.getInstance().addToken(id.toString());
         :};
factor ::= INTEGER_CONSTANT:int_const
         {: 
         System.out.println("Integer: " + int_const ); 
         IntermediateCodeGenerator.getInstance().addToken(int_const.toString());
         :};

factor ::= FLOAT_CONSTANT:float_const
         {: 
         System.out.println("Float: " + float_const ); 
         IntermediateCodeGenerator.getInstance().addToken(float_const.toString());
         :};      

factor ::= TEXT:string_const              
         {: 
         System.out.println("String: " + string_const);
         IntermediateCodeGenerator.getInstance().addToken(string_const.toString());
         :};

factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};
factor ::= TRIANGLE_AREA_MAX OPEN_BRACKET arg_list CLOSE_BRACKET 
         {: 
         System.out.println("Funcion triangle - metodo"); 
         IntermediateCodeGenerator.getInstance().addToken("triangleAreaMaximum");
         :};

/* NUEVO: unarios (para -n, +n, etc.) */
factor ::= PLUS factor {: 
         System.out.println("unario +"); 
         IntermediateCodeGenerator.getInstance().addToken("+");
         :};
factor ::= SUB  factor {: 
         System.out.println("unario -"); 
         IntermediateCodeGenerator.getInstance().addToken("-");
         :};


read    ::= READ OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET 
         {: 
         System.out.println("READ"); 
         IntermediateCodeGenerator.getInstance().addToken(id.toString()); 
         IntermediateCodeGenerator.getInstance().addToken("READ");
         :};

write   ::= WRITE OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET 
         {: 
         System.out.println("WRITE"); 
         IntermediateCodeGenerator.getInstance().addToken(id.toString()); 
         IntermediateCodeGenerator.getInstance().addToken("WRITE");
         :};

write   ::= WRITE OPEN_BRACKET TEXT:text CLOSE_BRACKET 
         {: 
         System.out.println("WRITE"); 
         IntermediateCodeGenerator.getInstance().addToken(text.toString());
         IntermediateCodeGenerator.getInstance().addToken("WRITE");
         :};

//Funcion triangle
arg_list ::= triangle SEMICOLON triangle {: System.out.println("Funcion triangle - params"); :};
triangle ::= OPEN_SQUARE coords SEMICOLON coords SEMICOLON coords CLOSE_SQUARE {: System.out.println("Funcion triangle - coord triangulo"); :};
coords ::= expression COMMA expression {: System.out.println("Funcion triangle - valores"); :};


/* condición booleana: isZero(expr) - Ya está implementada en simple_condition */
